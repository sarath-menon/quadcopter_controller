// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file motor_commands.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "motor_commands.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

motor_comands::motor_comands()
{
    // m_index com.eprosima.idl.parser.typecode.PrimitiveTypeCode@cb51256
    m_index = 0;
    // m_motor_command com.eprosima.idl.parser.typecode.ArrayTypeCode@25af5db5
    memset(&m_motor_command, 0, (4) * 4);

}

motor_comands::~motor_comands()
{


}

motor_comands::motor_comands(
        const motor_comands& x)
{
    m_index = x.m_index;
    m_motor_command = x.m_motor_command;
}

motor_comands::motor_comands(
        motor_comands&& x)
{
    m_index = x.m_index;
    m_motor_command = std::move(x.m_motor_command);
}

motor_comands& motor_comands::operator =(
        const motor_comands& x)
{

    m_index = x.m_index;
    m_motor_command = x.m_motor_command;

    return *this;
}

motor_comands& motor_comands::operator =(
        motor_comands&& x)
{

    m_index = x.m_index;
    m_motor_command = std::move(x.m_motor_command);

    return *this;
}

size_t motor_comands::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += ((4) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t motor_comands::getCdrSerializedSize(
        const motor_comands& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    if ((4) > 0)
    {
        current_alignment += ((4) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }


    return current_alignment - initial_alignment;
}

void motor_comands::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_index;
    scdr << m_motor_command;


}

void motor_comands::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_index;
    dcdr >> m_motor_command;

}

/*!
 * @brief This function sets a value in member index
 * @param _index New value for member index
 */
void motor_comands::index(
        uint32_t _index)
{
    m_index = _index;
}

/*!
 * @brief This function returns the value of member index
 * @return Value of member index
 */
uint32_t motor_comands::index() const
{
    return m_index;
}

/*!
 * @brief This function returns a reference to member index
 * @return Reference to member index
 */
uint32_t& motor_comands::index()
{
    return m_index;
}

/*!
 * @brief This function copies the value in member motor_command
 * @param _motor_command New value to be copied in member motor_command
 */
void motor_comands::motor_command(
        const std::array<float, 4>& _motor_command)
{
    m_motor_command = _motor_command;
}

/*!
 * @brief This function moves the value in member motor_command
 * @param _motor_command New value to be moved in member motor_command
 */
void motor_comands::motor_command(
        std::array<float, 4>&& _motor_command)
{
    m_motor_command = std::move(_motor_command);
}

/*!
 * @brief This function returns a constant reference to member motor_command
 * @return Constant reference to member motor_command
 */
const std::array<float, 4>& motor_comands::motor_command() const
{
    return m_motor_command;
}

/*!
 * @brief This function returns a reference to member motor_command
 * @return Reference to member motor_command
 */
std::array<float, 4>& motor_comands::motor_command()
{
    return m_motor_command;
}

size_t motor_comands::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;





    return current_align;
}

bool motor_comands::isKeyDefined()
{
    return false;
}

void motor_comands::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
      
}
